import pandas as pd
from sklearn.ensemble import IsolationForest
from sklearn.cluster import KMeans
from sklearn.preprocessing import LabelEncoder
import matplotlib.pyplot as plt

# Load the Excel file
df = pd.read_excel("internship_applications.xlsx", sheet_name="Applications")

# Convert submission_time
df["submission_time"] = pd.to_datetime(df["submission_time"])
df["submission_hour"] = df["submission_time"].dt.hour
df["submission_minute"] = df["submission_time"].dt.minute

# Duplicate flags
df["email_dup"] = df["email"].duplicated(keep=False).astype(int)
df["name_dup"] = df["name"].duplicated(keep=False).astype(int)
df["ip_dup"] = df["ip_address"].duplicated(keep=False).astype(int)

# Encode degree
le = LabelEncoder()
df["degree_encoded"] = le.fit_transform(df["degree"].astype(str))

# Select features
features = df[["cgpa", "submission_hour", "submission_minute",
               "email_dup", "name_dup", "ip_dup", "degree_encoded"]]

# Isolation Forest
iso_forest = IsolationForest(contamination=0.05, random_state=42)
df["anomaly_iso"] = iso_forest.fit_predict(features)

# KMeans Clustering
kmeans = KMeans(n_clusters=2, random_state=42)
df["cluster"] = kmeans.fit_predict(features)
df["anomaly_kmeans"] = df["cluster"].map(lambda x: -1 if x == df["cluster"].value_counts().idxmin() else 1)

# Final Alert
df["final_alert"] = ((df["anomaly_iso"] == -1) | (df["anomaly_kmeans"] == -1)).astype(int)

# Save to new Excel file
df.to_excel("internship_applications_with_alerts.xlsx", index=False)

# Optional: Plot
plt.scatter(df["cgpa"], df["submission_hour"], c=df["final_alert"], cmap='coolwarm')
plt.xlabel("CGPA")
plt.ylabel("Submission Hour")
plt.title("Detected Anomalies in Internship Applications")
plt.show()
