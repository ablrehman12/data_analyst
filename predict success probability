import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score
from sklearn.preprocessing import StandardScaler

# Step 1: Create synthetic dataset
data = {
    'attendance_rate': np.random.uniform(0.5, 1.0, 100),
    'task_completion_rate': np.random.uniform(0.4, 1.0, 100),
    'average_feedback_score': np.random.uniform(2.0, 5.0, 100)
}

df = pd.DataFrame(data)

# Create success label (1 if intern meets certain thresholds)
df['success'] = np.where(
    (df['attendance_rate'] > 0.75) &
    (df['task_completion_rate'] > 0.7) &
    (df['average_feedback_score'] > 3.5), 1, 0
)

# Step 2: Train/test split
X = df[['attendance_rate', 'task_completion_rate', 'average_feedback_score']]
y = df['success']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 3: Feature scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Step 4: Train ML model
model = RandomForestClassifier(random_state=42)
model.fit(X_train_scaled, y_train)

# Step 5: Predict and evaluate
y_pred = model.predict(X_test_scaled)

print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))
